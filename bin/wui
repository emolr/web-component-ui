#!/usr/bin/env node
const process = require('process');
const program = require('commander');
const runner = require('../runner');

const cwd = process.cwd();
const gulp = runner.gulp.run({directory: cwd});
const pkg = require('../package.json');

const log = require('../scripts/utils').log;

program
    .version(pkg.version || 'N/A');

program
    .command('build')
    .description('Compiles and packages your webcomponent ready to be released on NPM')
    .option('-d, --documentation', 'Generate demo + documentation files')
    .action(build);

program
    .command('start')
    .description('Watch for changes and rebuild demo + documentation')
    .option('-o, --open', 'Opens the URL in default browser')
    .action(start);

program.parse(process.argv);

if(program.args.length < 1) {
    program.outputHelp();
}

function build(options) {
    log('Compiling...', 1, 'Build');
    gulp.compileComponent(options)
        .then(() => {
            if(options.documentation) {
                log('Generating documentation...', 1, 'Build');
                return gulp.compileDocumentation();
            }
        })
        .catch((err) => log('Error: ', 4, 'Build'));
}
function start(options) {
    log('Compiling...', 1, 'Start');
    gulp.compileComponent()
        .then(() => {
            log('Generating docuentation...', 1, 'Start');
            return gulp.compileDocumentation();
        })
        .then(() => {
            log('Watching for changes...', 1, 'Start');
            return gulp.watch();
        })
        .then(() => {
            if(options.open) {
                log('Starting BrowserSync...', 1, 'Start');
                runner.bs.init(cwd);
            }
        })
        .catch((err) => log('Error: ', 4, 'Start'));
}
