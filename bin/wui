#!/usr/bin/env node
const process = require('process');
const program = require('commander');
const runner = require('../runner');

const cwd = process.cwd();
const gulp = runner.gulp.run({directory: cwd});
const documentation = runner.documentation;
const pkg = require('../package.json');

const log = require('../scripts/utils').log;

program
    .version(pkg.version || 'N/A');

program
    .command('build')
    .description('compiles and packages your webcomponent ready to be released on NPM')
    .option('-s, --styleguide', 'creates styleguide assets like index.json and a index page')
    .action(build);

program
    .command('start')
    .description('Watch for changes')
    .option('-o, --open', 'opens the URL in default browser')
    .option('-e, --entry <path>', 'relative path to component .md file, this will be used for creating a browser index')
    .action(start);

program.parse(process.argv);

if(program.args.length < 1) {
    program.outputHelp();
}

function build(options) {
    log('Compiling...', 1, 'Build');
    gulp.compile(options)
        .then(() => {
            if (options.styleguide) {
                documentation.createIndex();
            }
        })
        .then(() => {
            if (options.styleguide) {
                log('Generating overview', 1, 'Start');
                return documentation.createOverview();
            }
        })
        .catch((err) => log(`Error: ${err}`, 4, 'Build'));
}
function start(options) {
    log('Compiling...', 1, 'Start');
    gulp.compile()
        .then(() => {
            log('Generating sitemap', 1, 'Start');
            return documentation.createIndex();
        })
        .then(() => {
            log('Generating overview', 1, 'Start');
            return documentation.createOverview();
        })
        .then(() => {
            log('Watching for changes...', 1, 'Start');
            return gulp.watch();
        })
        .then(() => {
            if(options.open) {
                log('Starting BrowserSync...', 1, 'Start');
                if (!options.styleguide && options.entry) {
                    runner.bs.init(cwd, options.entry);
                } else {
                    runner.bs.init(cwd);
                }
            }
        })
        .catch((err) => log(`Error: ${err}`, 4, 'Start'));
}
